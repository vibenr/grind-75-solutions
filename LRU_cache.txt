class LRUCache {
public:
    // The list<int>::iterator is an iterator type that can be used to   traverse and modify elements in a list<int>. It allows you to access individual elements in a list<int> and perform operations on them.
    unordered_map<int, pair<list<int>::iterator, int>> mp; 
    list<int> dll; // doubly linked list 
    int size; 
    LRUCache(int capacity) {
        size = capacity; 
    }

    // we put recently updated value at first in LRU cache that's why any operation perform any node that means it is used so we put it at front of linked list and the nearest element to the tail is least recently used element. 

    void moveToFirst(int key){
        dll.erase(mp[key].first); 
        dll.push_front(key); 
        mp[key].first=dll.begin(); 
    }
    
    int get(int key) {
        if(mp.find(key) == mp.end()) return -1; // element is not present in the cache 
        moveToFirst(key); 
        return mp[key].second; 
    }
    
    void put(int key, int value) {
        if(mp.find(key) != mp.end()){
            // if element is already present in cache we'll update it's address and push front in dll. 
            mp[key].second = value; 
            moveToFirst(key); 
        }   
        else {
            dll.push_front(key); 
            mp[key] = {dll.begin(), value}; 
            size--; 
        }

        // condition when size of cache is full. 
        if(size < 0){
            mp.erase(dll.back()); 
            dll.pop_back(); 
            size++; 
        }
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */