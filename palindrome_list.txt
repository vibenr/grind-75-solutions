/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

/* Approach */
/* find the middle of the linked list then reverse the right half of the linked list and move the slow pointer by one node and now check every element head->val == slow->val */


class Solution {
public:


    ListNode* reverseLL(ListNode* head){
        ListNode* nxt = NULL; 
        ListNode* prev = NULL; 
        while(head!=NULL){
            nxt = head->next; 
            head->next = prev; 
            prev = head; 
            head = nxt; 
        }
        return prev; 
    }

    bool isPalindrome(ListNode* head) {
        if(head == NULL || head->next == NULL) return true;


        // find the middle of the linked list 

        ListNode* slow = head; 
        ListNode* fast = head; 

        while(fast->next != NULL && fast->next->next != NULL){
            slow = slow->next; 
            fast = fast->next->next; 
        }

        slow->next = reverseLL(slow->next); 
        slow = slow->next; 

        while(slow != NULL){
            if(head->val != slow->val)return false;
            head = head->next; 
            slow = slow->next;  
        }

        return true; 
    }
};